/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 *
 * @format
 */

import { Amplify, Notifications } from 'aws-amplify';
import { Credentials } from '@aws-amplify/core';
import { getId, getCredentialsForIdentity } from "@aws-amplify/core/lib-esm/AwsClients/CognitoIdentity";
import { Authenticator, useAuthenticator, withInAppMessaging } from '@aws-amplify/ui-react-native';
import { Text, Button, View, StyleSheet, ScrollView } from 'react-native';
//@ts-ignore
import awsConfig from 'backend'; // Metro does not seem to support turborepo resolution
import React from 'react';
import {useEffect, useState} from 'react';

const { InAppMessaging } = Notifications;

Amplify.configure(awsConfig);

function App(): JSX.Element {
  const { user, signOut } = useAuthenticator();
  const [identityId, setIdentityId] = useState("UNLOADED");
  const [accessKeyId, setAccessKeyId] = useState("UNLOADED");

  useEffect(() => {
    InAppMessaging.syncMessages();
  }, []);
  useEffect(() => {
    const loadIds = async () => {
      if (user) {
        // authenticated;
        const region = awsConfig.aws_project_region;
        const credentials = await Credentials.get();
        const apiHandlerConfig = {
          region,
          credentials,
        }
        const { IdentityId: identityId } = await getId(apiHandlerConfig, {
          IdentityPoolId: awsConfig.aws_cognito_identity_pool_id,
        })
        setIdentityId(identityId);
        const { Credentials: { AccessKeyId: accessKeyId } } = await getCredentialsForIdentity(apiHandlerConfig, {
          IdentityId: identityId,
        })
        setAccessKeyId(accessKeyId);
      }
    }
    loadIds();
  }, [user]);
  return (
    // TODO: call custom pinpoint client directly
      <Authenticator>
        <ScrollView style={styles.scrollView}>
          <View style={styles.apiView}>
            <Text>API - <Text style={styles.apiNameText}>CognitoIdentity::GetId</Text></Text>
            <Text>IdentityId loaded: <Text style={styles.responseText}>{identityId}</Text></Text>
          </View>
          <View style={styles.apiView}>
            <Text>API - <Text style={styles.apiNameText}>CognitoIdentity::GetCredentialsFromIdentity</Text></Text>
            <Text>Credentials access key id loaded: <Text style={styles.responseText}>{accessKeyId}</Text></Text>
          </View>
          <Button title='Sign out' onPress={signOut}></Button>
        </ScrollView>
      </Authenticator>
  );
}

const styles = StyleSheet.create({
  scrollView: {
    paddingTop: 50
  },
  apiNameText: {
    fontWeight: 'bold'
  },
  responseText: {
    fontWeight: 'bold'
  },
  apiView: {
    padding: 10,
    margin: '40pt 10pt 10pt 10pt',
    borderStyle: 'solid',
    borderWidth: 1,
  }
})

export default withInAppMessaging(() => <Authenticator.Provider><App /></Authenticator.Provider>);
