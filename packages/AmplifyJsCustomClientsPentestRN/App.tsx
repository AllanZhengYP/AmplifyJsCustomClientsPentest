/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 *
 * @format
 */

import { Amplify, Analytics, Notifications } from 'aws-amplify';
import { Credentials } from '@aws-amplify/core';
import { getId, getCredentialsForIdentity } from "@aws-amplify/core/lib-esm/AwsClients/CognitoIdentity";
import { getInAppMessages } from "@aws-amplify/core/internals/aws-clients/pinpoint";
import { Authenticator, useAuthenticator } from '@aws-amplify/ui-react-native';
import { Text, Button, View, StyleSheet, ScrollView } from 'react-native';
//@ts-ignore
import awsConfig from 'backend'; // Metro does not seem to support turborepo resolution
import React from 'react';
import {useEffect, useState} from 'react';

Amplify.configure(awsConfig);

const NO_RESPONSE = "NO RESPONSE";
const { InAppMessaging } = Notifications;

function App(): JSX.Element {
  const { user, signOut } = useAuthenticator();
  const [identityId, setIdentityId] = useState(NO_RESPONSE);
  const [accessKeyId, setAccessKeyId] = useState(NO_RESPONSE);
  const [pinpointUpdateEndpointResponse, setPinpointUpdateEndpointResponse] = useState(NO_RESPONSE);
  const [pinpointPutEventsResponse, setPinpointPutEventsResponse] = useState(NO_RESPONSE);
  const [pinpointInAppMessagesResponse, setPinpointInAppMessagesResponse] = useState(NO_RESPONSE);

  useEffect(() => {
    const loadIds = async () => {
      if (user) {
        // authenticated;
        const region = awsConfig.aws_project_region;
        const credentials = await Credentials.get();
        const apiHandlerConfig = {
          region,
          credentials,
        }
        const { IdentityId: identityId } = await getId(apiHandlerConfig, {
          IdentityPoolId: awsConfig.aws_cognito_identity_pool_id,
        })
        setIdentityId(identityId);
        const { Credentials: { AccessKeyId: accessKeyId } } = await getCredentialsForIdentity(apiHandlerConfig, {
          IdentityId: identityId,
        })
        setAccessKeyId(accessKeyId);
      }
    }
    loadIds();
    InAppMessaging.syncMessages();
  }, [user]);

  const updateEndpoint = async () => {
    // TODO: call custom pinpoint client directly
    // @ts-ignore
    const { MessageBody } = await Analytics.updateEndpoint({
      address: "https://google.com"
    });
    setPinpointUpdateEndpointResponse(JSON.stringify(MessageBody));
  }

  const putEvents = async () => {
    // TODO: call custom pinpoint client directly
    // @ts-ignore
    const response = await Analytics.record({
      name: 'testEvent',
      immediate: true
    })
    setPinpointPutEventsResponse(JSON.stringify(response));
  }

  const getInAppMessagesAction = async () => {
    const pinpointAppId: string = awsConfig.Notifications.InAppMessaging.AWSPinpoint.appId;
    const cachedEndpointId = InAppMessaging?.pluggables[0].config.endpointId;
    if (!cachedEndpointId) {
      throw new Error('Please update endpoint first');
    }
    console.log('endpointid', cachedEndpointId);
    const response = await getInAppMessages({
      region: awsConfig.aws_project_region,
      credentials: await Credentials.get(),
    }, {
      ApplicationId: pinpointAppId,
      EndpointId: cachedEndpointId
    });
    setPinpointInAppMessagesResponse(JSON.stringify(response));
  }

  return (
      <Authenticator>
        <ScrollView style={styles.scrollView}>
          <Text style={styles.apiNameText}>Signed in as user {user?.getUsername()}</Text>
          <View style={styles.apiView}>
            <Text>API - <Text style={styles.apiNameText}>CognitoIdentity::GetId</Text></Text>
            <Text>IdentityId loaded: <Text style={styles.responseText}>{identityId}</Text></Text>
          </View>
          <View style={styles.apiView}>
            <Text>API - <Text style={styles.apiNameText}>CognitoIdentity::GetCredentialsFromIdentity</Text></Text>
            <Text>Credentials access key id loaded: <Text style={styles.responseText}>{accessKeyId}</Text></Text>
          </View>
          <View style={styles.apiView}>
            <Text>API - <Text style={styles.apiNameText}>Pinpoint::UpdateEndpoint</Text></Text>
            <Text>Pinpoint endpoint update response: <Text style={styles.responseText}>{pinpointUpdateEndpointResponse}</Text></Text>
            <Button title='Update Endpoint' onPress={updateEndpoint}></Button>
          </View>
          <View style={styles.apiView}>
            <Text>API - <Text style={styles.apiNameText}>Pinpoint::PutEvents</Text></Text>
            <Text>Pinpoint put events response: <Text style={styles.responseText}>{pinpointPutEventsResponse}</Text></Text>
            <Button title='Put Events' onPress={putEvents}></Button>
          </View>
          <View style={styles.apiView}>
            <Text>API - <Text style={styles.apiNameText}>Pinpoint::GetInAppMessages</Text></Text>
            <Text>Pinpoint get in-app messages response: <Text style={styles.responseText}>{pinpointInAppMessagesResponse}</Text></Text>
            <Button title='Get Messages' onPress={getInAppMessagesAction}></Button>
          </View>
          <Button title='Sign out' onPress={signOut}></Button>
        </ScrollView>
      </Authenticator>
  );
}

const styles = StyleSheet.create({
  scrollView: {
    paddingTop: 50,
    paddingBottom: 50
  },
  apiNameText: {
    fontWeight: 'bold'
  },
  responseText: {
    fontWeight: 'bold'
  },
  apiView: {
    padding: 10,
    // margin: '40pt 10pt 10pt 10pt',
    borderStyle: 'solid',
    borderWidth: 1,
  }
})

export default () => <Authenticator.Provider><App /></Authenticator.Provider>;
