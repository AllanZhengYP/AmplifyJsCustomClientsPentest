/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 *
 * @format
 */

import { Amplify, Analytics, Notifications, Auth } from 'aws-amplify';
import { Credentials, Hub } from '@aws-amplify/core';
import { CognitoHostedUIIdentityProvider } from '@aws-amplify/auth';
import { getId, getCredentialsForIdentity } from "@aws-amplify/core/lib-esm/AwsClients/CognitoIdentity";
import { getInAppMessages } from "@aws-amplify/core/internals/aws-clients/pinpoint";
import { Authenticator, useAuthenticator } from '@aws-amplify/ui-react-native';
// import { withOAuth } from "aws-amplify-react-native";
import { Text, Button, View, StyleSheet, ScrollView, Linking } from 'react-native';
import InAppBrowser from 'react-native-inappbrowser-reborn';
//@ts-ignore
import awsConfig from 'backend'; // Metro does not seem to support turborepo resolution
import React from 'react';
import {useEffect, useState} from 'react';

// async function urlOpener(url, redirectUrl) {
//   await InAppBrowser.isAvailable();
//   console.log('urlOpener', url, redirectUrl);
//   const { type, url: newUrl } = await InAppBrowser.openAuth(url, redirectUrl, {
//     showTitle: false,
//     enableUrlBarHiding: true,
//     enableDefaultShare: false,
//     ephemeralWebSession: false,
//   });

//   if (type === 'success') {
//     Linking.openURL(newUrl);
//   }
// }

Amplify.configure({
  ...awsConfig,
  oauth: {
    ...awsConfig.oauth,
    // urlOpener,
    redirectSignIn: 'AmplifyJsCustomClientPentestRN://',
    redirectSignOut: 'AmplifyJsCustomClientPentestRN://'
  }
});
/**
 * https://customclientspentestd96fc280-d96fc280-dev.auth.us-west-2.amazoncognito.com/oauth2/authorize?redirect_uri=AmplifyJsCustomClientPentestRN%3A%2F%2F&response_type=code&client_id=3g3hs4tr0kbg6f83as1k09dsok&identity_provider=Google&scope=phone%20email%20openid%20profile%20aws.cognito.signin.user.admin&state=cecP2F0USoMPa5UlpclcmCURVHU7oyvr&code_challenge=XoJE8kxTTc5omICqMDNoHssJCLPAZxav3VISSWsiWds&code_challenge_method=S256
 */

const NO_RESPONSE = "NO RESPONSE";
const { InAppMessaging } = Notifications;

function App(): JSX.Element {
  // const { user, signOut } = useAuthenticator();
  const [user, setUser] = useState(null); // Social sign in user
  const [identityId, setIdentityId] = useState(NO_RESPONSE);
  const [accessKeyId, setAccessKeyId] = useState(NO_RESPONSE);
  const [pinpointUpdateEndpointResponse, setPinpointUpdateEndpointResponse] = useState(NO_RESPONSE);
  const [pinpointPutEventsResponse, setPinpointPutEventsResponse] = useState(NO_RESPONSE);
  const [pinpointInAppMessagesResponse, setPinpointInAppMessagesResponse] = useState(NO_RESPONSE);

  // useEffect(() => {
  //   const loadIds = async () => {
  //     if (user) {
  //       // authenticated;
  //       const region = awsConfig.aws_project_region;
  //       const credentials = await Credentials.get();
  //       const apiHandlerConfig = {
  //         region,
  //         credentials,
  //       }
  //       const { IdentityId: identityId } = await getId(apiHandlerConfig, {
  //         IdentityPoolId: awsConfig.aws_cognito_identity_pool_id,
  //       })
  //       setIdentityId(identityId);
  //       const { Credentials: { AccessKeyId: accessKeyId } } = await getCredentialsForIdentity(apiHandlerConfig, {
  //         IdentityId: identityId,
  //       })
  //       setAccessKeyId(accessKeyId);
  //     }
  //   }
  //   loadIds();
  //   InAppMessaging.syncMessages();
  // }, [user]);
  
  // Social sign in
  useEffect(() => {
    Hub.listen('auth', ({ payload: { event, data } }) => {
      switch (event) {
        case 'signIn':
        case 'cognitoHostedUI':
          getUser().then(userData => setUser(userData));
          break;
        case 'signOut':
          setUser(null);
          break;
        case 'signIn_failure':
        case 'cognitoHostedUI_failure':
          console.log('Sign in failure', data);
          break;
      }
    });

    getUser().then(userData => setUser(userData));
  }, []);
  function getUser() {
    return Auth.currentAuthenticatedUser()
      .then(userData => userData)
      .then(() => {
        return Auth.currentCredentials();
      })
      .then(credentials => {
        setAccessKeyId(credentials.accessKeyId);
        setIdentityId(credentials.identityId);
      })
      .catch(() => console.log('Not signed in'));
  }

  const updateEndpoint = async () => {
    // TODO: call custom pinpoint client directly
    // @ts-ignore
    const { MessageBody } = await Analytics.updateEndpoint({
      address: "https://google.com"
    });
    setPinpointUpdateEndpointResponse(JSON.stringify(MessageBody));
  }

  const putEvents = async () => {
    // TODO: call custom pinpoint client directly
    // @ts-ignore
    const response = await Analytics.record({
      name: 'testEvent',
      immediate: true
    })
    setPinpointPutEventsResponse(JSON.stringify(response));
  }

  const getInAppMessagesAction = async () => {
    const pinpointAppId: string = awsConfig.Notifications.InAppMessaging.AWSPinpoint.appId;
    const cachedEndpointId = InAppMessaging?.pluggables[0].config.endpointId;
    if (!cachedEndpointId) {
      throw new Error('Please update endpoint first');
    }
    console.log('endpointid', cachedEndpointId);
    const response = await getInAppMessages({
      region: awsConfig.aws_project_region,
      credentials: await Credentials.get(),
    }, {
      ApplicationId: pinpointAppId,
      EndpointId: cachedEndpointId
    });
    setPinpointInAppMessagesResponse(JSON.stringify(response));
  }

  return (
      // <Authenticator>
        <ScrollView style={styles.scrollView}>
          {/* social sign in */}
          <Button
            title="Open Amazon"
            onPress={() =>
              Auth.federatedSignIn({
                provider: CognitoHostedUIIdentityProvider.Google,
              })
            }
          />
          <Button title="Open Hosted UI" onPress={() => Auth.federatedSignIn()} />
          <Button title="Sign Out" onPress={() => Auth.signOut()} />
          <Text style={styles.apiNameText}>Signed in as user {user?.getUsername()}</Text>
          <View style={styles.apiView}>
            <Text>API - <Text style={styles.apiNameText}>CognitoIdentity::GetId</Text></Text>
            <Text>IdentityId loaded: <Text style={styles.responseText}>{identityId}</Text></Text>
          </View>
          <View style={styles.apiView}>
            <Text>API - <Text style={styles.apiNameText}>CognitoIdentity::GetCredentialsFromIdentity</Text></Text>
            <Text>Credentials access key id loaded: <Text style={styles.responseText}>{accessKeyId}</Text></Text>
          </View>
          <View style={styles.apiView}>
            <Text>API - <Text style={styles.apiNameText}>Pinpoint::UpdateEndpoint</Text></Text>
            <Text>Pinpoint endpoint update response: <Text style={styles.responseText}>{pinpointUpdateEndpointResponse}</Text></Text>
            <Button title='Update Endpoint' onPress={updateEndpoint}></Button>
          </View>
          <View style={styles.apiView}>
            <Text>API - <Text style={styles.apiNameText}>Pinpoint::PutEvents</Text></Text>
            <Text>Pinpoint put events response: <Text style={styles.responseText}>{pinpointPutEventsResponse}</Text></Text>
            <Button title='Put Events' onPress={putEvents}></Button>
          </View>
          <View style={styles.apiView}>
            <Text>API - <Text style={styles.apiNameText}>Pinpoint::GetInAppMessages</Text></Text>
            <Text>Pinpoint get in-app messages response: <Text style={styles.responseText}>{pinpointInAppMessagesResponse}</Text></Text>
            <Button title='Get Messages' onPress={getInAppMessagesAction}></Button>
          </View>
          {/* <Button title='Sign out' onPress={signOut}></Button> */}
          <Button title='Sign out' onPress={() => Auth.signOut()}></Button>
        </ScrollView>
      // </Authenticator>
  );
}

const styles = StyleSheet.create({
  scrollView: {
    paddingTop: 50,
    paddingBottom: 50
  },
  apiNameText: {
    fontWeight: 'bold'
  },
  responseText: {
    fontWeight: 'bold'
  },
  apiView: {
    padding: 10,
    // margin: '40pt 10pt 10pt 10pt',
    borderStyle: 'solid',
    borderWidth: 1,
  }
})

export default () => 
  // <Authenticator.Provider>
    <App />
    // </Authenticator.Provider>;
