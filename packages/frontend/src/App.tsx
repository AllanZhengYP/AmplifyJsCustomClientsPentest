import { Authenticator, Button, Card, Text, useAuthenticator, withInAppMessaging } from "@aws-amplify/ui-react";
import "@aws-amplify/ui-react/styles.css";
import { Credentials } from "@aws-amplify/core";
import { Cache } from '@aws-amplify/cache';
import { Amplify, Analytics, Notifications } from "aws-amplify";
import { getId, getCredentialsForIdentity } from "@aws-amplify/core/lib-esm/AwsClients/CognitoIdentity";
import { getInAppMessages } from "@aws-amplify/core/internals/aws-clients/pinpoint";
// @ts-ignore
import awsConfig from "backend";
import { useEffect, useState } from "react";
import "./App.css";

Amplify.configure({...awsConfig, ssr: true});
const { InAppMessaging } = Notifications

const NO_RESPONSE = "NO RESPONSE";

function App() {
  const { user, signOut } = useAuthenticator();
  const [identityId, setIdentityId] = useState(NO_RESPONSE);
  const [accessKeyId, setAccessKeyId] = useState(NO_RESPONSE);
  const [pinpointUpdateEndpointResponse, setPinpointUpdateEndpointResponse] = useState(NO_RESPONSE);
  const [pinpointPutEventsResponse, setPinpointPutEventsResponse] = useState(NO_RESPONSE);
  const [pinpointInAppMessagesResponse, setPinpointInAppMessagesResponse] = useState(NO_RESPONSE);

  useEffect(() => {
    const loadIds = async () => {
      if (user) {
        // authenticated;
        const region = awsConfig.aws_project_region;
        const credentials = await Credentials.get();
        const apiHandlerConfig = {
          region,
          credentials,
        }
        const { IdentityId: identityId } = await getId(apiHandlerConfig, {
          IdentityPoolId: awsConfig.aws_cognito_identity_pool_id,
        })
        setIdentityId(identityId);
        const { Credentials: { AccessKeyId: accessKeyId } } = await getCredentialsForIdentity(apiHandlerConfig, {
          IdentityId: identityId,
        })
        setAccessKeyId(accessKeyId);
      }
    }
    loadIds();
    InAppMessaging.syncMessages();
  }, [user])

  const updateEndpoint = async () => {
    // TODO: call custom pinpoint client directly
    // @ts-ignore
    const { MessageBody } = await Analytics.updateEndpoint({
      address: "https://google.com"
    });
    setPinpointUpdateEndpointResponse(JSON.stringify(MessageBody));
  }

  const putEvents = async () => {
    // TODO: call custom pinpoint client directly
    // @ts-ignore
    const response = await Analytics.record({
      name: 'testEvent',
      immediate: true
    })
    setPinpointPutEventsResponse(JSON.stringify(response));
  }

  const getInAppMessagesAction = async () => {
    const pinpointAppId: string = awsConfig.Notifications.InAppMessaging.AWSPinpoint.appId;
    const cacheKey = `InAppMessaging:AWSPinpoint:${pinpointAppId}`;
    console.log('cacheKey', cacheKey)
    const cachedEndpointId = Cache.getItem(cacheKey);
    if (!cachedEndpointId) {
      alert('Please update endpoint first');
      return;
    }

    const response = await getInAppMessages({
      region: awsConfig.aws_project_region,
      credentials: await Credentials.get(),
    }, {
      ApplicationId: pinpointAppId,
      EndpointId: cachedEndpointId
    });
    setPinpointInAppMessagesResponse(JSON.stringify(response));
  }

  return (
    <Authenticator>
      <div className="App">
            <Text fontSize={'large'} fontWeight={'bold'}>Signed in as user {user?.getUsername()}</Text>
            <Card title="CognitoIdentity::GetId" variation="outlined">
              <Text>API - <b>CognitoIdentity::GetId</b></Text>
              <Text>IdentityId loaded: <b>{identityId}</b></Text>
            </Card>
            <Card title="CognitoIdentity::GetCredentialsFromIdentity" variation="outlined">
              <Text>API - <b>CognitoIdentity::GetCredentialsFromIdentity</b></Text>
              <Text>Credentials access key id loaded: <b>{accessKeyId}</b></Text>
            </Card>
            <Card title="Pinpoint::UpdateEndpoint" variation="outlined">
              <Text>API - <b>Pinpoint::UpdateEndpoint</b></Text>
              <Text>Pinpoint endpoint update response: <b>{pinpointUpdateEndpointResponse}</b></Text>
              <Button onClick={updateEndpoint}>Update Endpoint</Button>
            </Card>
            <Card title="Pinpoint::PutEvents" variation="outlined">
              <Text>API - <b>Pinpoint::PutEvents</b></Text>
              <Text>Pinpoint put events response: <b>{pinpointPutEventsResponse}</b></Text>
              <Button onClick={putEvents}>Put Events</Button>
            </Card>
            <Card title="Pinpoint::GetInAppMessages" variation="outlined">
              <Text>API - <b>Pinpoint::GetInAppMessages</b></Text>
              <Text>Pinpoint get in-app messages response: <b>{pinpointInAppMessagesResponse}</b></Text>
              <Button onClick={getInAppMessagesAction}>Get Messages</Button>
            </Card>
            <Button onClick={signOut}>Sign out</Button>
          </div>
    </Authenticator>
  );
}

export default withInAppMessaging(App);
