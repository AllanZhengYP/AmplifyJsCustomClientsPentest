import { Authenticator, Button, Card, Text, useAuthenticator } from "@aws-amplify/ui-react";
import "@aws-amplify/ui-react/styles.css";
import { Credentials } from "@aws-amplify/core";
import { Amplify, Analytics } from "aws-amplify";
// @ts-ignore
import awsConfig from "backend";
import { useEffect, useState } from "react";
import "./App.css";

Amplify.configure(awsConfig);

function App() {
  const { user, signOut } = useAuthenticator();
  const [identityId, setIdentityId] = useState("UNLOADED");
  const [accessKeyId, setAccessKeyId] = useState("UNLOADED");
  const [pinpointUpdateEndpointResponse, setPinpointUpdateEndpointResponse] = useState("NO RESPONSE");
  const [pinpointPutEventsResponse, setPinpointPutEventsResponse] = useState("NO RESPONSE");

  useEffect(() => {
    const loadIds = async () => {
      if (user) {
        const { accessKeyId, identityId } = await Credentials.get();
        setIdentityId(identityId);
        setAccessKeyId(accessKeyId);
      } else {
        setIdentityId("");
        setAccessKeyId("");
      }
    }
    loadIds();
  }, [user])

  const updateEndpoint = async () => {
    // @ts-ignore
    const { MessageBody } = await Analytics.updateEndpoint({
      address: "https://google.com"
    });
    setPinpointUpdateEndpointResponse(JSON.stringify(MessageBody));
  }

  const putEvents = async () => {
    // @ts-ignore
    const response = await Analytics.record({
      name: 'testEvent',
      immediate: true
    })
    setPinpointPutEventsResponse(JSON.stringify(response));
  }

  return (
    <Authenticator>
      <div className="App">
            <Text fontSize={'large'} fontWeight={'bold'}>Signed in as user {user?.getUsername()}</Text>
            <Card title="CognitoIdentity::GetId" variation="outlined">
              <Text>API - <b>CognitoIdentity::GetId</b></Text>
              <Text>IdentityId loaded: <b>{identityId}</b></Text>
            </Card>
            <Card title="CognitoIdentity::GetCredentialsFromIdentity" variation="outlined">
              <Text>API - <b>CognitoIdentity::GetCredentialsFromIdentity</b></Text>
              <Text>Credentials access key id loaded: <b>{accessKeyId}</b></Text>
            </Card>
            <Card title="Pinpoint::UpdateEndpoint" variation="outlined">
              <Text>API - <b>Pinpoint::UpdateEndpoint</b></Text>
              <Text>Pinpoint endpoint update response: <b>{pinpointUpdateEndpointResponse}</b></Text>
              <Button onClick={updateEndpoint}>Update Endpoint</Button>
            </Card>
            <Card title="Pinpoint::PutEvents" variation="outlined">
              <Text>API - <b>Pinpoint::PutEvents</b></Text>
              <Text>Pinpoint put events response: <b>{pinpointPutEventsResponse}</b></Text>
              <Button onClick={putEvents}>Put Events</Button>
            </Card>
            <Button onClick={signOut}>Sign out</Button>

          </div>
    </Authenticator>
  );
}

export default App;
